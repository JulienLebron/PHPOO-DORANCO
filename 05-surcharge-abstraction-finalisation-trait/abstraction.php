<?php

abstract class Joueur
{
    protected $ageJoueur;

    public function setAgeJoueur($age)
    {
        $this->ageJoueur = $age;
    }

    public function getAgeJoueur()
    {
        return $this->ageJoueur;
    }

    public function seConnecter()
    {
        if($this->getAgeJoueur() < $this->etreMajeur())
        {
            return "ğŸ›‘ Vous avez " . $this->getAgeJoueur() . " ans<br>ğŸ’¬ Vous devez Ãªtre majeur pour jouer Ã  ce jeux ! <br>ğŸ’¬ Age requis : " . $this->etreMajeur() . " ans";
        }
        else
        {
            return "âœ… Vous Ãªtes connecter au serveur de jeux !";
        }
    }

    abstract public function etreMajeur();
    abstract public function devise();
}

class JoueurFr extends Joueur 
{
    public function etreMajeur()
    {
        return 18;
    }

    public function devise()
    {
        return 'â‚¬';
    }
}

class JoueurUsa extends Joueur 
{
    public function etreMajeur()
    {
        return 21;
    }
    
    public function devise()
    {
        return '$';
    }
}

// $joueur = new Joueur; // âš  Une classe abstraite n'est pas instanciable
$joueurFr = new JoueurFr;
echo '<pre>'; print_r($joueurFr); echo '</pre>';
echo '<pre>'; print_r(get_class_methods($joueurFr)); echo '</pre>';

$joueurFr->setAgeJoueur(20);
echo $joueurFr->seConnecter() . '<hr>';

$joueurUsa = new JoueurUsa;
$joueurUsa->setAgeJoueur(20);
echo $joueurUsa->seConnecter() . '<hr>';


/*
    Une class abstraite n'est pas instanciable
    Les mÃ©thodes abstraites n'ont pas de contenu (elles sont dite no-body)
    Lorsque l'on hÃ©rite de mÃ©thodes abstraites, nous sommes obligÃ© de les redÃ©finir
    Pour avoir des mÃ©thodes abstraites il est nÃ©cessaire que la classe qui les contient soit elle-mÃªme abstraite
    Une classe abstraite peut contenir des mÃ©thodes normale

    Le dÃ©veloppeur qui Ã©crit une classe abstraite est au coeur de l'application.
    Il va obliger les autres dÃ©veloppeur Ã  redÃ©finir la mÃ©thode etreMajeur() et devise().
    Il impose une bonne contrainte.
*/